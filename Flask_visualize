#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from CRNgraph import *
import dash
import dash_core_components as dcc
import dash_html_components as html
import networkx as nx
import plotly.graph_objs as go
import pandas as pd
from colour import Color
from datetime import datetime
from textwrap import dedent as d
import json

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "Chemical Reaction Network"

load_data("reaxys csvs/sorbitol.csv")
#NETWORK = nx.DiGraph()
#make_graph(chemnet, NETWORK)
MOLECULE = "limonene."

##############################################################################################################################################################
def network_graph(graph, central_node):

    # to define the centric point of the networkx layout using central node
    shells=[]
    shell1=[]
    shell1.append(central_node)
    shells.append(shell1)
    shell2=[]
    for node in graph.nodes:
        if node!=central_node:
            shell2.append(node)
    shells.append(shell2)

    pos = nx.layout.spring_layout(graph)
    #pos = nx.layout.circular_layout(graph)
    #nx.layout.shell_layout only works for more than 3 nodes
    #if len(shell2)>1:
        #pos = nx.drawing.layout.shell_layout(graph, shells)
    #else:
        #pos = nx.drawing.layout.spring_layout(graph)
    for node in graph.nodes:
        graph.nodes[node]['pos'] = list(pos[node]) #define position of nodes


    if len(shell2)==0:
        traceRecode = []  # contains edge_trace, node_trace, middle_node_trace

        node_trace = go.Scatter(x=tuple([1]), y=tuple([1]), text=tuple([central_node]), textposition="bottom center",
                                mode='markers+text',
                                marker={'size': 40, 'color': 'LightSkyBlue'})
        traceRecode.append(node_trace)

        node_trace1 = go.Scatter(x=tuple([1]), y=tuple([1]),
                                mode='markers',
                                marker={'size': 40, 'color': 'LightSkyBlue'},
                                opacity=0)
        traceRecode.append(node_trace1)

        figure = {
            "data": traceRecode,
            "layout": go.Layout(title='Interactive Transaction Visualization', showlegend=False,
                                margin={'b': 40, 'l': 40, 'r': 40, 't': 40},
                                xaxis={'showgrid': False, 'zeroline': False, 'showticklabels': False},
                                yaxis={'showgrid': False, 'zeroline': False, 'showticklabels': False},
                                height=600
                                )}
        return figure


    traceRecode = []  # contains edge_trace, node_trace, middle_node_trace
    ############################################################################################################################################################
    colors = list(Color('lightcoral').range_to(Color('darkred'), len(graph.edges())))
    colors = ['rgb' + str(x.rgb) for x in colors]

    index = 0
    for edge in graph.edges:
        x0, y0 = graph.nodes[edge[0]]['pos']
        x1, y1 = graph.nodes[edge[1]]['pos']
        #for key in graph.get_edge_data(edge[0], edge[1]):
           # time = graph.get_edge_data(edge[0], edge[1])[key]['time (h)'] #access time from hashtable of reactions conditions stored wtith key = reaction ID
       # if time == None:
           ##else:
        weight = 2.0

        trace = go.Scatter(x=tuple([x0, x1, None]), y=tuple([y0, y1, None]),
                           mode='lines',
                           line={'width': weight},
                           marker=dict(color=colors[index]),
                           line_shape='spline',
                           opacity=1)
        traceRecode.append(trace)
        index = index + 1
    ###############################################################################################################################################################
    node_trace = go.Scatter(x=[], y=[], hovertext=[], text=[], mode='markers+text', textposition="bottom center",
                            hoverinfo="text", marker={'size': 50, 'color': 'LightSkyBlue'})

    index = 0
    for node in graph.nodes():
        x, y = graph.nodes[node]['pos']
        hovertext = "Molecule: " + str(graph.nodes[node]) + "<br>" + "Reaction ID " + str(
            graph.edges.data(node))
        text = node
        node_trace['x'] += tuple([x])
        node_trace['y'] += tuple([y])
        node_trace['hovertext'] += tuple([hovertext])
        node_trace['text'] += tuple([text])
        index = index + 1

    traceRecode.append(node_trace)
    ################################################################################################################################################################
    middle_hover_trace = go.Scatter(x=[], y=[], hovertext=[], mode='markers', hoverinfo="text",
                                    marker={'size': 20, 'color': 'LightSkyBlue'},
                                    opacity=0)

    index = 0
    for edge in graph.edges:
        x0, y0 = graph.nodes[edge[0]]['pos']
        x1, y1 = graph.nodes[edge[1]]['pos']
        edge_data = list(graph.get_edge_data(edge[0], edge[1]).values())[0] #access first element in edge hashtable to get reaction conditions
        hovertext = "Time: " + str(edge_data['time (h)']) + "<br>" + "Temp: " + str(
            edge_data['temp (C)']) + "<br>" + "Reaction ID: " + str(
            edge_data['reaction ID']) + "<br>" + "Yield: " + str(edge_data['yield'])
        middle_hover_trace['x'] += tuple([(x0 + x1) / 2])
        middle_hover_trace['y'] += tuple([(y0 + y1) / 2])
        middle_hover_trace['hovertext'] += tuple([hovertext])
        index = index + 1

    traceRecode.append(middle_hover_trace)
    #################################################################################################################################################################
    figure = {
        "data": traceRecode,
        "layout": go.Layout(title='Interactive Reaction Visualization', showlegend=False, hovermode='closest',
                            margin={'b': 40, 'l': 40, 'r': 40, 't': 40},
                            xaxis={'showgrid': False, 'zeroline': False, 'showticklabels': False},
                            yaxis={'showgrid': False, 'zeroline': False, 'showticklabels': False},
                            height=600,
                            clickmode='event+select',
                            annotations=[
                                dict(
                                    ax=(graph.nodes[edge[0]]['pos'][0] + graph.nodes[edge[1]]['pos'][0]) / 2,
                                    ay=(graph.nodes[edge[0]]['pos'][1] + graph.nodes[edge[1]]['pos'][1]) / 2, axref='x', ayref='y',
                                    x=(graph.nodes[edge[1]]['pos'][0] * 3 + graph.nodes[edge[0]]['pos'][0]) / 4,
                                    y=(graph.nodes[edge[1]]['pos'][1] * 3 + graph.nodes[edge[0]]['pos'][1]) / 4, xref='x', yref='y',
                                    showarrow=True,
                                    arrowhead=3,
                                    arrowsize=4,
                                    arrowwidth=1,
                                    opacity=1
                                ) for edge in graph.edges]
                            )}
    return figure
######################################################################################################################################################################
# styles: for right side hover/click component
styles = {
    'pre': {
        'border': 'thin lightgrey solid',
        'overflowX': 'scroll'
    }
}

app.layout = html.Div([
    #########################Title
    html.Div([html.H1("Chemical Network Graph")],
             className="row",
             style={'textAlign': "center"}),
    #############################################################################################define the row
    html.Div(
        className="row",
        children=[
            ##############################################left side two input components
            html.Div(
                className="two columns",
                children=[
                    html.Div(
                        className="twelve columns",
                        children=[
                            dcc.Markdown(d("""
                            **Molecule to Search**
                            Input the account to visualize.
                            """)),
                            dcc.Input(id="input1", type="text", placeholder="reaction"),
                            html.Div(id="output")
                        ],
                        style={'height': '300px'}
                    )
                ]
            ),

            ############################################middle graph component
            html.Div(
                className="eight columns",
                children=[dcc.Graph(id="my-graph",
                                    figure=network_graph(chem_graph, MOLECULE))],
            ),

            #########################################right side two output component
            html.Div(
                className="two columns",
                children=[
                    html.Div(
                        className='twelve columns',
                        children=[
                            dcc.Markdown(d("""
                            **Hover Data**
                            Mouse over values in the graph.
                            """)),
                            html.Pre(id='hover-data', style=styles['pre'])
                        ],
                        style={'height': '400px'}),

                    html.Div(
                        className='twelve columns',
                        children=[
                            dcc.Markdown(d("""
                            **Click Data**
                            Click on points in the graph.
                            """)),
                            html.Pre(id='click-data', style=styles['pre'])
                        ],
                        style={'height': '400px'})
                ]
            )
        ]
    )
])

###################################callback for left side components
#@app.callback(
    #ash.dependencies.Output('my-graph', 'figure'),
    #[#dash.dependencies.Input('my-range-slider', 'value'),
     #dash.dependencies.Input('input1', 'value')])
#def update_output(value,input1):
   # NETWORK = value
    #MOLECULE = input1
    #return network_graph(value, input1)
    # to update the global variable of graph, central node
################################callback for right side components
@app.callback(
    dash.dependencies.Output('hover-data', 'children'),
    [dash.dependencies.Input('my-graph', 'hoverData')])
def display_hover_data(hoverData):
    return json.dumps(hoverData, indent=2)


@app.callback(
    dash.dependencies.Output('click-data', 'children'),
    [dash.dependencies.Input('my-graph', 'clickData')])
def display_click_data(clickData):
    return json.dumps(clickData, indent=2)



if __name__ == '__main__':
    app.run_server(debug=True)


